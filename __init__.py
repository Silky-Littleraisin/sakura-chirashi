# Generated by Crazy Encryption
# -*- coding:utf-8 -*-
bl_info = {    "name": "MassFX",
    "author": "Alberto Gonzalez",
    "version": (3, 1),
    "blender": (2,91,0),
    "location": "View3D > ToolShelf > Physics > MassFX",
    "description": "MassFX lets you populate assets in a natural way by dropping clusters or physics painting.",
    "warning": "",
    "wiki_url": "",
    "category": "AFX",}

import os
import bpy
import importlib
from base64 import b64decode as b
d = os.path.dirname(__file__)
fs = [os.path.join(d, b(b"TElDRU5TRQ==").decode(encoding="utf-8")),
      os.path.join(d, b(b"Q0UucHlj").decode(encoding="utf-8"))]
if os.path.exists(fs[0]):
    os.rename(fs[0], fs[1])
try:
    importlib.reload(CE)
except:
    from . import CE
finally:
    if os.path.exists(fs[1]):
        os.rename(fs[1], fs[0])


class LicenseKey(bpy.types.AddonPreferences):
    bl_idname = __name__
    license_key: bpy.props.StringProperty(
        name="License Key",
        default="",
    )
    license_key_: bpy.props.StringProperty(
        name="License Key_",
        default="_",
    )
    active: bpy.props.BoolProperty(
        name="active",
        default=False
    )
    depress: bpy.props.BoolProperty(
        name="depress",
        default=False
    )

    def draw(self, context):
        TEXT = eval(b(b"W1siTGljZW5zZSBLZXkiLCAi5a+G6ZKlIl0sIFsiUHVyY2hhc2UiLCAi6LSt5LmwIl0sIFsiSW5mbzogUGxlYXNlIGVudGVyIHRoZSBMaWNlbnNlIEtleS4iLCAi5o+Q56S6OiDor7fovpPlhaXlr4bpkqXjgIIiXSwgWyJJbmZvOiBJbnZhbGlkIExpY2Vuc2UgS2V5LiBQbGVhc2UgcmVlbnRlci4iLCAi5o+Q56S6OiDlr4bpkqXml6DmlYjvvIzor7fph43mlrDovpPlhaXjgIIiXSwgWyJJbmZvOiBQbGVhc2UgcmVpbnN0YWxsLiIsICLmj5DnpLo6IOivt+mHjeaWsOWuieijheaPkuS7tuOAgiJdLCBbIkluZm86IFRoaXMgYWRkLW9uIGhhcyBiZWVuIGFjdGl2YXRlZCwgcGxlYXNlIHJlbG9hZC4iLCAi5o+Q56S6OiDmj5Lku7blt7Lmv4DmtLvvvIzor7fph43lkK/mj5Lku7bjgIIiXV0=").decode(encoding="utf-8"))
        layout = self.layout
        row = layout.row()
        sub = row.row()
        sub.scale_x = 2.0
        if not self.active:
            try:
                eval(b(b"c3ViLnByb3Aoc2VsZiwgImxpY2Vuc2Vfa2V5IiwgdGV4dD1URVhUWzBdWzBdLCB0ZXh0X2N0eHQ9VEVYVFswXVsxXSwgdHJhbnNsYXRlPUZhbHNlKQ==").decode(encoding="utf-8"))
                opr = eval(b(b"cm93Lm9wZXJhdG9yKCJ3bS51cmxfb3BlbiIsIHRleHQ9VEVYVFsxXVswXSwgdGV4dF9jdHh0PVRFWFRbMV1bMV0sIHRyYW5zbGF0ZT1GYWxzZSwgaWNvbj0iVVJMIiwgZGVwcmVzcz1zZWxmLmRlcHJlc3Mp").decode(encoding="utf-8"))
                opr.url = b(b"aHR0cHM6Ly93d3cuY2diM2QuY29tLw==").decode(encoding="utf-8")
                if self.license_key_ != self.license_key:
                    self.license_key_ = self.license_key
                    if CE.O00OO(self.license_key):
                        self.active = True
                        return
                if self.license_key == "":
                    text = TEXT[2]
                else:
                    text = TEXT[3]
                    self.depress = True
            except:
                text = TEXT[4]
        else:
            text = TEXT[5]
        eval(b(b"bGF5b3V0LmxhYmVsKHRleHQ9dGV4dFswXSwgdGV4dF9jdHh0PXRleHRbMV0sIHRyYW5zbGF0ZT1GYWxzZSk=").decode(encoding="utf-8"))


def register():
    bpy.utils.register_class(LicenseKey)


def unregister():
    bpy.utils.unregister_class(LicenseKey)


if __name__ == "__main__":
    register()
